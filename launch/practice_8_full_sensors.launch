<?xml version="1.0"?>
<launch>
    
    <arg name="global_planner"          default="lanelet2"              doc="waypoints, lanelet2" />
    <arg name="speed_limit"             default="40" />
    <arg name="localizer"               default="carla"                 doc="novatel, carla" />
    <arg name="detector"                default="cluster"                 doc="cluster, carla" />
    <arg name="tfl_detector"            default="camera"                 doc="carla, camera, mqtt_camera_fusion" />
    <arg name="tfl_cameras"             default="mako"                         doc="Cameras to use for traffic light detection (mako, nvidia)"/>
    <arg name="enable_auto_stop_checker" default="true"         doc="enable auto stop checker" />
    <arg name="onnx_path"               default="$(find autoware_mini)/data/models/traffic_lights/tlr_model.onnx" doc="onnx model path" />
    <arg name="tracker"                 default="ema"                   if="$(eval detector != 'carla')" />
    <arg name="tracker"                 default="none"                  if="$(eval detector == 'carla')" />
    <arg name='map_name'                default='tartu_demo'/>
    <arg name="follower"                default="pure_pursuit"          doc="pure_pursuit, stanley" />
    <arg name="waypoints_file"          default="waypoints_erm_utm_1m.csv" />
    <arg name="lanelet2_map_name"       default="$(arg map_name).osm" />
    <arg name='use_lexus_model'         default='true' />
    <arg name='use_lidar_center'        default='true' />
    <arg name='use_lidar_front'         default='false' />
    <arg name="more_visualizations"     default="false"                 doc="By default only visualize final detections" />
    <!-- Visualization -->
    <arg name="launch_rviz"             default='true'                         doc="Determines if rviz is launched or not"/>

    <!-- Carla specific -->
    <arg name='host'                    default='localhost' />
    <arg name='port'                    default='2000' />
    <arg name="use_scenario_runner"     default='false'                        doc="Use Scenario Runner with Carla"/>
    <arg name="scenario_name"           default=""                             doc="Scenario name for Scenario Runner"/>
    <arg name="route_id"                default=""                             doc="Route ID to follow for running route scenario"/>
    <arg name="generate_traffic"        default="$(eval not use_scenario_runner)" doc="Generate traffic in Carla"/>
    <arg name="use_manual_control"      default="false"                        doc="Use manual control for Carla"/>


    <!-- Localization -->
    <group ns="localization">
        <node if="$(eval localizer=='novatel')" pkg="autoware_mini_practice_solutions" type="localizer.py" name="localizer" output="screen" required="true" />

        <node if="$(eval localizer=='carla')" pkg='autoware_mini' type='carla_localizer.py' name='carla_localizer' output='screen' required="true" />

        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/localization.yaml" />
    </group>

    <!-- Detection -->
    <group ns="detection">
        <group if="$(eval 'cluster' in detector)" ns="lidar">
            <group ns="center">
                <node pkg="autoware_mini" type="naive_ground_removal.py" name="naive_ground_removal" output="screen" required="true">
                    <remap from="points_raw" to="/lidar_center/points_raw" />
                </node>
            </group>

            <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" required="true" />
            <node pkg="nodelet" type="nodelet" name="voxel_grid_filter" args="load pcl/VoxelGrid pcl_manager" output="screen" required="true">
                <remap from="~input" to="/detection/lidar/center/points_no_ground" />
                <remap from="~output" to="/detection/lidar/points_filtered" />
            </node>

            <node pkg="autoware_mini_practice_solutions" type="points_clusterer.py" name="points_clusterer" output="screen" required="true" />
            <node pkg="autoware_mini_practice_solutions" type="cluster_detector.py" name="cluster_detector" output="screen" required="true" />

            <node pkg="topic_tools" type="relay" args="detected_objects /detection/detected_objects" name="detected_objects_relay" output="screen" required="true" />
        </group>

        <!-- Obstacle detection -->
        <!-- Carla's ground truth objects -->
        <node if="$(eval detector=='carla')" pkg="autoware_mini" type="carla_detector.py" name="carla_detector" output="screen" required="true" />

        <!-- Obstacle simulator -->
        <node if="$(eval detector=='sim')" pkg="autoware_mini" type="obstacle_simulation.py" name="obstacle_simulation" output="screen" required="true" />

        <!-- Detected objects visualizer -->
        <node if="$(arg more_visualizations)" type="detected_objects_visualizer.py" name="detected_objects_visualizer" pkg="autoware_mini" output="screen" required="true" />

        <group if="$(eval tracker=='ema')">
            <node pkg="autoware_mini" type="ema_tracker.py" name="ema_tracker" output="screen" required="true" />
            <node pkg="autoware_mini" type="detected_objects_visualizer.py" name="tracked_objects_visualizer" output="screen" required="true">
                <remap from="detected_objects" to="tracked_objects" />
                <remap from="detected_objects_markers" to="tracked_objects_markers" />
            </node>
             <node pkg="topic_tools" type="relay" args="tracked_objects final_objects" name="detected_objects_relay" output="screen" required="true" />
        </group>

        <!-- Final objects visualizer -->
        <node pkg="autoware_mini" type="detected_objects_visualizer.py" name="final_objects_visualizer" output="screen" required="true">
            <remap from="detected_objects" to="final_objects" />
            <remap from="detected_objects_markers" to="final_objects_markers" />
        </node>

        <!-- Traffic light detection -->
        <!-- Carla's ground truth traffic lights -->
        <node if="$(eval tfl_detector=='carla')" pkg="autoware_mini" type="carla_traffic_light_detector.py" name="carla_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
        </node>

        <!-- MQTT traffic light detector -->
        <node if="$(eval 'mqtt' in tfl_detector)" pkg="autoware_mini" type="mqtt_traffic_light_detector.py" name="mqtt_traffic_light_detector" output="screen" required="true">
            <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <remap if="$(eval tfl_detector=='mqtt_camera_fusion')" from="traffic_light_status" to="mqtt/traffic_light_status"/>
        </node>

        <!-- Camera based traffic light detection -->
        <group if="$(eval 'camera' in tfl_detector)">

            <!-- Camera FL -->
            <node pkg="autoware_mini_practice_solutions" type="camera_traffic_light_detector.py" name="camera_traffic_light_detector" output="screen" required="true" ns="camera1">
                <remap from="camera_info" to="/camera_fl/camera_info"/>
                <remap from="image_raw" to="/camera_fl/image_raw"/>
                <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
                <param name="onnx_path" value="$(arg onnx_path)" />
            </node>

            <!-- Camera FR -->
            <node pkg="autoware_mini_practice_solutions" type="camera_traffic_light_detector.py" name="camera_traffic_light_detector" output="screen" required="true" ns="camera2">
                <remap from="camera_info" to="/camera_fr/camera_info"/>
                <remap from="image_raw" to="/camera_fr/image_raw"/>
                <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
                <param name="onnx_path" value="$(arg onnx_path)" />
            </node>

            <node pkg="autoware_mini" type="traffic_light_majority_merger.py" name="traffic_light_majority_merger" output="screen" required="true" >
                <remap if="$(eval tfl_detector=='mqtt_camera_fusion')" from="traffic_light_status" to="camera/traffic_light_status"/>
            </node>

            <node if="$(eval tfl_detector=='mqtt_camera_fusion')" pkg="autoware_mini" type="traffic_light_priority_merger.py" name="traffic_light_priority_merger" output="screen" required="true" >
                <remap from="tfl_status_topic_1" to="mqtt/traffic_light_status"/>
                <remap from="tfl_status_topic_2" to="camera/traffic_light_status"/>
            </node>

        </group>

        <rosparam command="load" file="$(find autoware_mini)/config/detection.yaml"/>
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/detection.yaml" />
    </group>

    <!-- Planning -->
    <group ns="planning">

        <!-- Lanelet2 map visualizer -->
        <node pkg="autoware_mini" type="lanelet2_map_visualizer.py" name="lanelet2_map_visualizer" output="screen" required="true">
            <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <param name="enable_auto_stop_checker" value="$(arg enable_auto_stop_checker)" />
        </node>

        <!-- Lanelet2 global planner -->
        <node pkg="autoware_mini_practice_solutions" type="lanelet2_global_planner.py" name="lanelet2_global_planner" output="screen" required="true">
            <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            <param name="speed_limit"       value="$(arg speed_limit)" />
        </node>

        <!-- Global path visualizer -->
        <node pkg="autoware_mini" type="global_path_visualizer.py" name="global_path_visualizer" output="screen" required="true"/>

        <!-- Collision-points based local planner -->
        <group>
            <node pkg="autoware_mini_practice_solutions" type="local_path_extractor.py" name="local_path_extractor" output="screen" required="true" />

            <node pkg="autoware_mini_practice_solutions" type="collision_points_manager.py" name="collision_points_manager" output="screen" required="true">
                <param name="lanelet2_map_path" value="$(find autoware_mini)/data/maps/$(arg lanelet2_map_name)" />
            </node>

            <node pkg="autoware_mini_practice_solutions" type="simple_speed_planner.py" name="simple_speed_planner" output="screen" required="true" />
        </group>
        <!-- Local path visualizer -->
        <node pkg="autoware_mini" type="local_path_visualizer.py" name="local_path_visualizer" output="screen" required="true"/>

        <!-- Config -->
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/planning.yaml" />

    </group>

    <!-- Control -->
    <group ns="control">
        <!-- Follower -->
        <node pkg="autoware_mini_practice_solutions" type="pure_pursuit_follower.py" name="pure_pursuit_follower" output="screen" required="true" >
            <remap from="path" to="/planning/local_path" />
        </node>
        <rosparam command="load" file="$(find autoware_mini_practice_solutions)/config/control.yaml"/>
    </group>

    <!-- Load vehicle config data -->
    <rosparam command="load" file="$(find autoware_mini)/config/vehicle.yaml" ns="vehicle"/>

    <!-- Carla platform -->
    <include file="$(find autoware_mini)/launch/platform/carla.launch">
        <arg name='host'                                value='$(arg host)'/>
        <arg name='port'                                value='$(arg port)'/>
        <arg name='map_name'                            value='$(arg map_name)'/>
        <arg name="use_lidar"                           value="$(eval 'cluster' in detector and detector != 'lidar_vella')" />
        <arg name="use_radar"                           value="$(eval 'radar' in detector)" />
        <arg name="use_gnss"                            value="$(eval localizer == 'novatel')" />
        <arg name="use_mako_cameras"                    value="$(eval ('camera' in tfl_detector or 'yolo' in tfl_detector) and tfl_cameras=='mako')" />
        <arg name="use_nvidia_cameras"                  value="$(eval ('camera' in tfl_detector or 'yolo' in tfl_detector) and tfl_cameras=='nvidia')" />
        <arg name="use_manual_control"                  value="$(arg use_manual_control)" />
        <arg name="generate_traffic"                    value="$(arg generate_traffic)" />
        <arg name="use_scenario_runner"                 value="$(arg use_scenario_runner)" />
        <arg name="route_id"                            value="$(arg route_id)" />
        <arg name="scenario_name"                       value="$(arg scenario_name)" />
    </include>

    <group ns="lexus_model">
    	<param name="robot_description" textfile="$(find autoware_mini)/config/urdf/lexus_model.urdf" />
	    <node pkg="robot_state_publisher" type="robot_state_publisher" name="lexus_model_state_publisher" output="screen" required="true" />
    </group>

    <!-- Rviz -->
    <include file="$(find autoware_mini)/launch/dashboard.launch" />
    <node type="rviz" name="rviz" pkg="rviz" args="-d $(find autoware_mini_practice_solutions)/rviz/practice_8.rviz" required="true" />
</launch>